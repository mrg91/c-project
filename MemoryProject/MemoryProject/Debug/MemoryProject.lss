
MemoryProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  0000071a  000007ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080022a  0080022a  000007d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ec  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f53  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fd  00000000  00000000  0000302f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000673  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a99  00000000  00000000  000040ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 32       	cpi	r26, 0x2A	; 42
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e2       	ldi	r26, 0x2A	; 42
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 37       	cpi	r26, 0x70	; 112
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	1e d2       	rcall	.+1084   	; 0x55c <main>
 120:	fa c2       	rjmp	.+1524   	; 0x716 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <time>:
 124:	fc 01       	movw	r30, r24
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <__system_time>
 12e:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <__system_time+0x1>
 132:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__system_time+0x2>
 136:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__system_time+0x3>
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	30 97       	sbiw	r30, 0x00	; 0
 13e:	21 f0       	breq	.+8      	; 0x148 <time+0x24>
 140:	60 83       	st	Z, r22
 142:	71 83       	std	Z+1, r23	; 0x01
 144:	82 83       	std	Z+2, r24	; 0x02
 146:	93 83       	std	Z+3, r25	; 0x03
 148:	08 95       	ret

0000014a <start>:
int value[10] = { 0b00000000, 0b11111110, 0b11111101, 0b11111011, 0b11110111, 0b11101111, 0b11011111, 0b10111111, 0b01111111, 0b11111111};
int a;

void start() {
	
	DDRA = 0xFF; //makes PORTA as Output
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	81 b9       	out	0x01, r24	; 1
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	90 e0       	ldi	r25, 0x00	; 0

//while(1) //infinite loop
//{
	for(int i = 0; i < 8; i++)
	{
		PORTA = 0xFF; //Turns ON All LEDs
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	3f eb       	ldi	r19, 0xBF	; 191
 158:	44 ed       	ldi	r20, 0xD4	; 212
 15a:	51 e0       	ldi	r21, 0x01	; 1
 15c:	31 50       	subi	r19, 0x01	; 1
 15e:	40 40       	sbci	r20, 0x00	; 0
 160:	50 40       	sbci	r21, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <start+0x12>
 164:	00 c0       	rjmp	.+0      	; 0x166 <start+0x1c>
 166:	00 00       	nop
		_delay_ms(60); //Â½ second delay
		PORTA = 0x00; //Turns OFF All LEDs
 168:	12 b8       	out	0x02, r1	; 2
 16a:	3f eb       	ldi	r19, 0xBF	; 191
 16c:	44 ed       	ldi	r20, 0xD4	; 212
 16e:	51 e0       	ldi	r21, 0x01	; 1
 170:	31 50       	subi	r19, 0x01	; 1
 172:	40 40       	sbci	r20, 0x00	; 0
 174:	50 40       	sbci	r21, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <start+0x26>
 178:	00 c0       	rjmp	.+0      	; 0x17a <start+0x30>
 17a:	00 00       	nop
 17c:	01 97       	sbiw	r24, 0x01	; 1
	DDRA = 0xFF; //makes PORTA as Output
	int startGame = 0;

//while(1) //infinite loop
//{
	for(int i = 0; i < 8; i++)
 17e:	51 f7       	brne	.-44     	; 0x154 <start+0xa>
		PORTA = 0x00; //Turns OFF All LEDs
		_delay_ms(60); //Â½ second delay
		startGame++;
	}
	
	PORTA = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	82 b9       	out	0x02, r24	; 2
 184:	08 95       	ret

00000186 <badAnswer>:
//}	
}

void badAnswer() {
	
	DDRA = 0xFF; //makes PORTA as Output
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	81 b9       	out	0x01, r24	; 1
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	90 e0       	ldi	r25, 0x00	; 0
	int mistake = 0;
	
	for(int i = 0; i < 3; i++)
	{
		PORTA = 0xFF; //Turns ON All LEDs
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	22 b9       	out	0x02, r18	; 2
 192:	3f e3       	ldi	r19, 0x3F	; 63
 194:	42 e4       	ldi	r20, 0x42	; 66
 196:	5f e0       	ldi	r21, 0x0F	; 15
 198:	31 50       	subi	r19, 0x01	; 1
 19a:	40 40       	sbci	r20, 0x00	; 0
 19c:	50 40       	sbci	r21, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <badAnswer+0x12>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <badAnswer+0x1c>
 1a2:	00 00       	nop
		_delay_ms(500); //Â½ second delay
		PORTA = 0x00; //Turns OFF All LEDs
 1a4:	12 b8       	out	0x02, r1	; 2
 1a6:	3f e3       	ldi	r19, 0x3F	; 63
 1a8:	42 e4       	ldi	r20, 0x42	; 66
 1aa:	5f e0       	ldi	r21, 0x0F	; 15
 1ac:	31 50       	subi	r19, 0x01	; 1
 1ae:	40 40       	sbci	r20, 0x00	; 0
 1b0:	50 40       	sbci	r21, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <badAnswer+0x26>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <badAnswer+0x30>
 1b6:	00 00       	nop
 1b8:	01 97       	sbiw	r24, 0x01	; 1
void badAnswer() {
	
	DDRA = 0xFF; //makes PORTA as Output
	int mistake = 0;
	
	for(int i = 0; i < 3; i++)
 1ba:	51 f7       	brne	.-44     	; 0x190 <badAnswer+0xa>
		PORTA = 0x00; //Turns OFF All LEDs
		_delay_ms(500); //Â½ second delay
		mistake++;
	}
	
	PORTA = 0xFF;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	82 b9       	out	0x02, r24	; 2
 1c0:	08 95       	ret

000001c2 <win>:


void win() 
{
	int i;
	DDRA = 0xFF;
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	81 b9       	out	0x01, r24	; 1
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	90 e0       	ldi	r25, 0x00	; 0
	
	for (int j = 0; j < 3; j++)
	{
		DDRA = 0xff;
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	21 b9       	out	0x01, r18	; 1
 1ce:	3f e7       	ldi	r19, 0x7F	; 127
 1d0:	4a e1       	ldi	r20, 0x1A	; 26
 1d2:	56 e0       	ldi	r21, 0x06	; 6
 1d4:	31 50       	subi	r19, 0x01	; 1
 1d6:	40 40       	sbci	r20, 0x00	; 0
 1d8:	50 40       	sbci	r21, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <win+0x12>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <win+0x1c>
 1de:	00 00       	nop
		_delay_ms(200);
		PORTA = 0xff;
 1e0:	22 b9       	out	0x02, r18	; 2
 1e2:	6f e7       	ldi	r22, 0x7F	; 127
 1e4:	3a e1       	ldi	r19, 0x1A	; 26
 1e6:	46 e0       	ldi	r20, 0x06	; 6
 1e8:	61 50       	subi	r22, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
 1ec:	40 40       	sbci	r20, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <win+0x26>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <win+0x30>
 1f2:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x00;
 1f4:	12 b8       	out	0x02, r1	; 2
 1f6:	01 97       	sbiw	r24, 0x01	; 1
void win() 
{
	int i;
	DDRA = 0xFF;
	
	for (int j = 0; j < 3; j++)
 1f8:	49 f7       	brne	.-46     	; 0x1cc <win+0xa>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
	
	//while(1)
	//{
		for (i=0; i <= 7; i++)
		{
			PORTA = (1 << i); // Shifting LEDS = 0-7 (left)
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	9a 01       	movw	r18, r20
 204:	08 2e       	mov	r0, r24
 206:	02 c0       	rjmp	.+4      	; 0x20c <win+0x4a>
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <win+0x46>
 210:	22 b9       	out	0x02, r18	; 2
 212:	6f e3       	ldi	r22, 0x3F	; 63
 214:	2d e0       	ldi	r18, 0x0D	; 13
 216:	33 e0       	ldi	r19, 0x03	; 3
 218:	61 50       	subi	r22, 0x01	; 1
 21a:	20 40       	sbci	r18, 0x00	; 0
 21c:	30 40       	sbci	r19, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <win+0x56>
 220:	00 c0       	rjmp	.+0      	; 0x222 <win+0x60>
 222:	00 00       	nop
		PORTA = 0x00;
	}
	
	//while(1)
	//{
		for (i=0; i <= 7; i++)
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	88 30       	cpi	r24, 0x08	; 8
 228:	91 05       	cpc	r25, r1
 22a:	59 f7       	brne	.-42     	; 0x202 <win+0x40>
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(100);
		}
	
		for (i=7; i >= 0; i--)
		{
			PORTA = (1 << i); // Shifting LEDS = 0-7 (right)
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	9a 01       	movw	r18, r20
 236:	08 2e       	mov	r0, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <win+0x7c>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <win+0x78>
 242:	22 b9       	out	0x02, r18	; 2
 244:	6f e3       	ldi	r22, 0x3F	; 63
 246:	2d e0       	ldi	r18, 0x0D	; 13
 248:	33 e0       	ldi	r19, 0x03	; 3
 24a:	61 50       	subi	r22, 0x01	; 1
 24c:	20 40       	sbci	r18, 0x00	; 0
 24e:	30 40       	sbci	r19, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <win+0x88>
 252:	00 c0       	rjmp	.+0      	; 0x254 <win+0x92>
 254:	00 00       	nop
		{
			PORTA = (1 << i); // Shifting LEDS = 0-7 (left)
			_delay_ms(100);
		}
	
		for (i=7; i >= 0; i--)
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	68 f7       	brcc	.-38     	; 0x234 <win+0x72>
		{
			PORTA = (1 << i); // Shifting LEDS = 0-7 (right)
			_delay_ms(100);
		}
		
		PORTA = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	82 b9       	out	0x02, r24	; 2
 25e:	08 95       	ret

00000260 <end>:
		return;
	//}			
}

void end() 
{
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	90 e0       	ldi	r25, 0x00	; 0
		for (int k = 0; k < 3; k++) 
		{
		DDRA = 0xff;
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	21 b9       	out	0x01, r18	; 1
 268:	3f e7       	ldi	r19, 0x7F	; 127
 26a:	4a e1       	ldi	r20, 0x1A	; 26
 26c:	56 e0       	ldi	r21, 0x06	; 6
 26e:	31 50       	subi	r19, 0x01	; 1
 270:	40 40       	sbci	r20, 0x00	; 0
 272:	50 40       	sbci	r21, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <end+0xe>
 276:	00 c0       	rjmp	.+0      	; 0x278 <end+0x18>
 278:	00 00       	nop
		_delay_ms(200);
		PORTA = 0xff;
 27a:	22 b9       	out	0x02, r18	; 2
 27c:	3f e7       	ldi	r19, 0x7F	; 127
 27e:	4a e1       	ldi	r20, 0x1A	; 26
 280:	56 e0       	ldi	r21, 0x06	; 6
 282:	31 50       	subi	r19, 0x01	; 1
 284:	40 40       	sbci	r20, 0x00	; 0
 286:	50 40       	sbci	r21, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <end+0x22>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <end+0x2c>
 28c:	00 00       	nop
		_delay_ms(200);
		PORTA = 0x00;
 28e:	12 b8       	out	0x02, r1	; 2
 290:	01 97       	sbiw	r24, 0x01	; 1
	//}			
}

void end() 
{
		for (int k = 0; k < 3; k++) 
 292:	49 f7       	brne	.-46     	; 0x266 <end+0x6>
 294:	aa e1       	ldi	r26, 0x1A	; 26
 296:	b2 e0       	ldi	r27, 0x02	; 2
 298:	24 e0       	ldi	r18, 0x04	; 4
 29a:	32 e0       	ldi	r19, 0x02	; 2
 29c:	fd 01       	movw	r30, r26
 29e:	32 97       	sbiw	r30, 0x02	; 2
		PORTA = 0x00;
		}
		for (int j = 0; j < 2; j++) {
		for (int i = 10; i >= 0; i--) {

			PORTA = ~(value[i]); // (Value1[i]);
 2a0:	80 81       	ld	r24, Z
 2a2:	80 95       	com	r24
 2a4:	82 b9       	out	0x02, r24	; 2
 2a6:	8f e1       	ldi	r24, 0x1F	; 31
 2a8:	91 ea       	ldi	r25, 0xA1	; 161
 2aa:	47 e0       	ldi	r20, 0x07	; 7
 2ac:	81 50       	subi	r24, 0x01	; 1
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	40 40       	sbci	r20, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <end+0x4c>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <end+0x56>
 2b6:	00 00       	nop
		PORTA = 0xff;
		_delay_ms(200);
		PORTA = 0x00;
		}
		for (int j = 0; j < 2; j++) {
		for (int i = 10; i >= 0; i--) {
 2b8:	e2 17       	cp	r30, r18
 2ba:	f3 07       	cpc	r31, r19
 2bc:	81 f7       	brne	.-32     	; 0x29e <end+0x3e>
 2be:	12 97       	sbiw	r26, 0x02	; 2

			PORTA = ~(value[i]); // (Value1[i]);
 2c0:	8c 91       	ld	r24, X
 2c2:	80 95       	com	r24
 2c4:	82 b9       	out	0x02, r24	; 2
 2c6:	5f e1       	ldi	r21, 0x1F	; 31
 2c8:	81 ea       	ldi	r24, 0xA1	; 161
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	51 50       	subi	r21, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <end+0x6c>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <end+0x76>
 2d6:	00 00       	nop
		PORTA = 0xff;
		_delay_ms(200);
		PORTA = 0x00;
		}
		for (int j = 0; j < 2; j++) {
		for (int i = 10; i >= 0; i--) {
 2d8:	a2 17       	cp	r26, r18
 2da:	b3 07       	cpc	r27, r19
 2dc:	81 f7       	brne	.-32     	; 0x2be <end+0x5e>

			PORTA = ~(value[i]); // (Value1[i]);
			_delay_ms(250);
		}
}
}
 2de:	08 95       	ret

000002e0 <makeLedBlinking>:
}*/


void makeLedBlinking(int a)
{
	PORTA = 0xFF;
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	92 b9       	out	0x02, r25	; 2
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	34 e3       	ldi	r19, 0x34	; 52
 2e8:	4c e0       	ldi	r20, 0x0C	; 12
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	30 40       	sbci	r19, 0x00	; 0
 2ee:	40 40       	sbci	r20, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <makeLedBlinking+0xa>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <makeLedBlinking+0x14>
 2f4:	00 00       	nop
	_delay_ms(400); //1 second delay
	PORTA = a;
 2f6:	82 b9       	out	0x02, r24	; 2
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	24 e3       	ldi	r18, 0x34	; 52
 2fc:	3c e0       	ldi	r19, 0x0C	; 12
 2fe:	81 50       	subi	r24, 0x01	; 1
 300:	20 40       	sbci	r18, 0x00	; 0
 302:	30 40       	sbci	r19, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <makeLedBlinking+0x1e>
 306:	00 c0       	rjmp	.+0      	; 0x308 <makeLedBlinking+0x28>
 308:	00 00       	nop
	_delay_ms(400); //1 second delay
	PORTA = 0xFF;
 30a:	92 b9       	out	0x02, r25	; 2
 30c:	08 95       	ret

0000030e <init>:
int BtnUsr[taille];

// int Value[upper+1] = { 11111110,11111101,11111011,11110111,11101111,11011111,10111111,01111111 }
	int ValueSeq[8] = { 0b11111110, 0b11111101, 0b11111011, 0b11110111, 0b11101111, 0b11011111, 0b10111111, 0b01111111};
void init() { 
	DDRB = 0x00;
 30e:	14 b8       	out	0x04, r1	; 4
	DDRA = 0xff;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	81 b9       	out	0x01, r24	; 1
 314:	08 95       	ret

00000316 <createSeq>:
}


void createSeq(int *Seq, int size) {
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
	int i;
	int randomIndex = 0;
	for(i = 0; i<size; i++) {
 31e:	16 16       	cp	r1, r22
 320:	17 06       	cpc	r1, r23
 322:	dc f4       	brge	.+54     	; 0x35a <createSeq+0x44>
 324:	8c 01       	movw	r16, r24
 326:	ec 01       	movw	r28, r24
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	06 0f       	add	r16, r22
 32e:	17 1f       	adc	r17, r23
		randomIndex = (rand()%8); 
 330:	87 d1       	rcall	.+782    	; 0x640 <rand>
       Seq[i] = ValueSeq[randomIndex]; //rand()%upper + lower;
 332:	87 70       	andi	r24, 0x07	; 7
 334:	90 78       	andi	r25, 0x80	; 128
 336:	99 23       	and	r25, r25
 338:	24 f4       	brge	.+8      	; 0x342 <createSeq+0x2c>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	88 6f       	ori	r24, 0xF8	; 248
 33e:	9f 6f       	ori	r25, 0xFF	; 255
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	fc 01       	movw	r30, r24
 348:	e8 5e       	subi	r30, 0xE8	; 232
 34a:	fd 4f       	sbci	r31, 0xFD	; 253
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	89 93       	st	Y+, r24
 352:	99 93       	st	Y+, r25


void createSeq(int *Seq, int size) {
	int i;
	int randomIndex = 0;
	for(i = 0; i<size; i++) {
 354:	c0 17       	cp	r28, r16
 356:	d1 07       	cpc	r29, r17
 358:	59 f7       	brne	.-42     	; 0x330 <createSeq+0x1a>
		randomIndex = (rand()%8); 
       Seq[i] = ValueSeq[randomIndex]; //rand()%upper + lower;
	} 
	
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	08 95       	ret

00000364 <addvalue>:
					
				}
			}
	}

void addvalue(int *BtnUsr, int index) {
 364:	9c 01       	movw	r18, r24
		
			while (PINB == 0xff) {
 366:	83 b1       	in	r24, 0x03	; 3
 368:	8f 3f       	cpi	r24, 0xFF	; 255
 36a:	51 f4       	brne	.+20     	; 0x380 <addvalue+0x1c>
				BtnUsr[index] = 0;
 36c:	fb 01       	movw	r30, r22
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	e2 0f       	add	r30, r18
 374:	f3 1f       	adc	r31, r19
 376:	11 82       	std	Z+1, r1	; 0x01
 378:	10 82       	st	Z, r1
			}
	}

void addvalue(int *BtnUsr, int index) {
		
			while (PINB == 0xff) {
 37a:	93 b1       	in	r25, 0x03	; 3
 37c:	9f 3f       	cpi	r25, 0xFF	; 255
 37e:	d9 f3       	breq	.-10     	; 0x376 <addvalue+0x12>
				BtnUsr[index] = 0;
			}
			BtnUsr[index] = PINB;
 380:	93 b1       	in	r25, 0x03	; 3
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	f9 01       	movw	r30, r18
 388:	e6 0f       	add	r30, r22
 38a:	f7 1f       	adc	r31, r23
 38c:	89 2f       	mov	r24, r25
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	91 83       	std	Z+1, r25	; 0x01
 392:	80 83       	st	Z, r24
 394:	08 95       	ret

00000396 <sameSeq>:
	
		
	
}

void sameSeq(int *Seq, int *tab, int n) {
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
	int c;
	int i;
	c = 1;
	for(i=0;i<n;i++){
 39a:	14 16       	cp	r1, r20
 39c:	15 06       	cpc	r1, r21
 39e:	d4 f4       	brge	.+52     	; 0x3d4 <sameSeq+0x3e>
 3a0:	fc 01       	movw	r30, r24
 3a2:	a6 2f       	mov	r26, r22
 3a4:	b7 2f       	mov	r27, r23
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	84 0f       	add	r24, r20
 3ac:	95 1f       	adc	r25, r21
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
		if(Seq[i] != tab[i]) {
				c = 0;
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	40 e0       	ldi	r20, 0x00	; 0
void sameSeq(int *Seq, int *tab, int n) {
	int c;
	int i;
	c = 1;
	for(i=0;i<n;i++){
		if(Seq[i] != tab[i]) {
 3b6:	c1 91       	ld	r28, Z+
 3b8:	d1 91       	ld	r29, Z+
 3ba:	6d 91       	ld	r22, X+
 3bc:	7d 91       	ld	r23, X+
 3be:	c6 17       	cp	r28, r22
 3c0:	d7 07       	cpc	r29, r23
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <sameSeq+0x32>
				c = 0;
 3c4:	25 2f       	mov	r18, r21
 3c6:	34 2f       	mov	r19, r20

void sameSeq(int *Seq, int *tab, int n) {
	int c;
	int i;
	c = 1;
	for(i=0;i<n;i++){
 3c8:	e8 17       	cp	r30, r24
 3ca:	f9 07       	cpc	r31, r25
 3cc:	a1 f7       	brne	.-24     	; 0x3b6 <sameSeq+0x20>
		if(Seq[i] != tab[i]) {
				c = 0;
		}
	}
	if(c == 1) {
 3ce:	21 30       	cpi	r18, 0x01	; 1
 3d0:	31 05       	cpc	r19, r1
 3d2:	19 f4       	brne	.+6      	; 0x3da <sameSeq+0x44>
		win();
 3d4:	f6 de       	rcall	.-532    	; 0x1c2 <win>
		end();
 3d6:	44 df       	rcall	.-376    	; 0x260 <end>
		return;
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <sameSeq+0x46>
	}
		end();
 3da:	42 df       	rcall	.-380    	; 0x260 <end>
 3dc:	df 91       	pop	r29
		return;
	}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <addUserSequence>:
 3e2:	cf 93       	push	r28
				BtnUsr[index] = 0;
			}
			BtnUsr[index] = PINB;
}

void addUserSequence(int *tab, int *Seq, int value, int size) {
 3e4:	df 93       	push	r29
	
	if (tracker == size-1) {
 3e6:	d9 01       	movw	r26, r18
 3e8:	11 97       	sbiw	r26, 0x01	; 1
 3ea:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__data_end>
 3ee:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <__data_end+0x1>
 3f2:	ae 17       	cp	r26, r30
 3f4:	bf 07       	cpc	r27, r31
 3f6:	61 f4       	brne	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f8:	eb 01       	movw	r28, r22
 3fa:	bc 01       	movw	r22, r24
		tab[tracker] = value;
 3fc:	aa 0f       	add	r26, r26
 3fe:	bb 1f       	adc	r27, r27
 400:	a8 0f       	add	r26, r24
 402:	b9 1f       	adc	r27, r25
 404:	4d 93       	st	X+, r20
 406:	5c 93       	st	X, r21
		sameSeq(Seq,tab,size);
 408:	a9 01       	movw	r20, r18
 40a:	ce 01       	movw	r24, r28
 40c:	c4 df       	rcall	.-120    	; 0x396 <sameSeq>
		return;
 40e:	12 c0       	rjmp	.+36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	}
	
	if (tracker < size) {
 410:	e2 17       	cp	r30, r18
 412:	f3 07       	cpc	r31, r19
 414:	7c f4       	brge	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		tab[tracker] = value;
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	e8 0f       	add	r30, r24
 41c:	f9 1f       	adc	r31, r25
 41e:	51 83       	std	Z+1, r21	; 0x01
 420:	40 83       	st	Z, r20
		tracker++;
 422:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
 426:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <__data_end+0x1>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__data_end+0x1>
 430:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end>
	}
	
	
		
	
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <compare>:
       Seq[i] = ValueSeq[randomIndex]; //rand()%upper + lower;
	} 
	
}

void compare(int *Seq, int *UserSeq, int size, int nb) {
 43a:	cf 92       	push	r12
 43c:	df 92       	push	r13
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	8c 01       	movw	r16, r24
 44c:	7b 01       	movw	r14, r22
 44e:	6a 01       	movw	r12, r20
 450:	e9 01       	movw	r28, r18
			
		while (i < nb) {
 452:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <i>
 456:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <i+0x1>
 45a:	82 17       	cp	r24, r18
 45c:	93 07       	cpc	r25, r19
 45e:	a4 f4       	brge	.+40     	; 0x488 <compare+0x4e>
			makeLedBlinking(Seq[i]);
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	f8 01       	movw	r30, r16
 466:	e8 0f       	add	r30, r24
 468:	f9 1f       	adc	r31, r25
 46a:	80 81       	ld	r24, Z
 46c:	91 81       	ldd	r25, Z+1	; 0x01
 46e:	38 df       	rcall	.-400    	; 0x2e0 <makeLedBlinking>
		i++;
 470:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <i>
 474:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <i+0x1>
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <i+0x1>
 47e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <i>
	
}

void compare(int *Seq, int *UserSeq, int size, int nb) {
			
		while (i < nb) {
 482:	8c 17       	cp	r24, r28
 484:	9d 07       	cpc	r25, r29
 486:	64 f3       	brlt	.-40     	; 0x460 <compare+0x26>
			makeLedBlinking(Seq[i]);
		i++;
			}
		i = 0;
 488:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <i+0x1>
 48c:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <i>
		
		
		for (j = 0; j < nb; j++)
 490:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <j+0x1>
 494:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <j>
 498:	1c 16       	cp	r1, r28
 49a:	1d 06       	cpc	r1, r29
 49c:	94 f4       	brge	.+36     	; 0x4c2 <compare+0x88>
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	70 e0       	ldi	r23, 0x00	; 0
		{
			addvalue(BtnUsr, j);
 4a2:	88 e3       	ldi	r24, 0x38	; 56
 4a4:	92 e0       	ldi	r25, 0x02	; 2
 4a6:	5e df       	rcall	.-324    	; 0x364 <addvalue>
		i++;
			}
		i = 0;
		
		
		for (j = 0; j < nb; j++)
 4a8:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <j>
 4ac:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <j+0x1>
 4b0:	6f 5f       	subi	r22, 0xFF	; 255
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <j+0x1>
 4b8:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <j>
 4bc:	6c 17       	cp	r22, r28
 4be:	7d 07       	cpc	r23, r29
 4c0:	84 f3       	brlt	.-32     	; 0x4a2 <compare+0x68>
		{
			addvalue(BtnUsr, j);
				}
		
			
			while (k < nb) {
 4c2:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <k>
 4c6:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <k+0x1>
 4ca:	8c 17       	cp	r24, r28
 4cc:	9d 07       	cpc	r25, r29
 4ce:	0c f0       	brlt	.+2      	; 0x4d2 <compare+0x98>
 4d0:	3c c0       	rjmp	.+120    	; 0x54a <compare+0x110>

				if (!(Seq[k] == BtnUsr[k]))
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	fc 01       	movw	r30, r24
 4d8:	e8 5c       	subi	r30, 0xC8	; 200
 4da:	fd 4f       	sbci	r31, 0xFD	; 253
 4dc:	40 81       	ld	r20, Z
 4de:	51 81       	ldd	r21, Z+1	; 0x01
 4e0:	f8 01       	movw	r30, r16
 4e2:	e8 0f       	add	r30, r24
 4e4:	f9 1f       	adc	r31, r25
 4e6:	80 81       	ld	r24, Z
 4e8:	91 81       	ldd	r25, Z+1	; 0x01
 4ea:	84 17       	cp	r24, r20
 4ec:	95 07       	cpc	r25, r21
 4ee:	99 f0       	breq	.+38     	; 0x516 <compare+0xdc>
 4f0:	0f c0       	rjmp	.+30     	; 0x510 <compare+0xd6>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	f8 01       	movw	r30, r16
 4f8:	e8 0f       	add	r30, r24
 4fa:	f9 1f       	adc	r31, r25
 4fc:	40 81       	ld	r20, Z
 4fe:	51 81       	ldd	r21, Z+1	; 0x01
 500:	fc 01       	movw	r30, r24
 502:	e8 5c       	subi	r30, 0xC8	; 200
 504:	fd 4f       	sbci	r31, 0xFD	; 253
 506:	80 81       	ld	r24, Z
 508:	91 81       	ldd	r25, Z+1	; 0x01
 50a:	48 17       	cp	r20, r24
 50c:	59 07       	cpc	r21, r25
				{
					badAnswer();
 50e:	19 f0       	breq	.+6      	; 0x516 <compare+0xdc>
 510:	3a de       	rcall	.-908    	; 0x186 <badAnswer>
					end();
 512:	a6 de       	rcall	.-692    	; 0x260 <end>
 514:	1a c0       	rjmp	.+52     	; 0x54a <compare+0x110>
					return;	
					}
				else {
					addUserSequence(UserSeq, Seq, BtnUsr[k], size);
 516:	96 01       	movw	r18, r12
 518:	b8 01       	movw	r22, r16
 51a:	c7 01       	movw	r24, r14
 51c:	62 df       	rcall	.-316    	; 0x3e2 <addUserSequence>
 51e:	21 96       	adiw	r28, 0x01	; 1
					nb++;
 520:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <k>
					k++;
 524:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <k+0x1>
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <k+0x1>
 52e:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <k>
					compare(Seq,UserSeq,size,nb);
 532:	9e 01       	movw	r18, r28
 534:	a6 01       	movw	r20, r12
 536:	b7 01       	movw	r22, r14
 538:	c8 01       	movw	r24, r16
 53a:	7f df       	rcall	.-258    	; 0x43a <compare>
 53c:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <k>
		{
			addvalue(BtnUsr, j);
				}
		
			
			while (k < nb) {
 540:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <k+0x1>
 544:	8c 17       	cp	r24, r28
 546:	9d 07       	cpc	r25, r29
 548:	a4 f2       	brlt	.-88     	; 0x4f2 <compare+0xb8>
 54a:	df 91       	pop	r29
					k++;
					compare(Seq,UserSeq,size,nb);
					
				}
			}
	}
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	08 95       	ret

0000055c <main>:
//	Mytimer = ~TCCR1B;
//	Reset_Timer();
//	srand(Mytimer);
	//	setup_seed();
	
	init();
 55c:	d8 de       	rcall	.-592    	; 0x30e <init>
	
	//	initrand();
	//	srand(sstate);
//	_delay_ms(1000);
	start();
 55e:	f5 dd       	rcall	.-1046   	; 0x14a <start>
 560:	2f e3       	ldi	r18, 0x3F	; 63
 562:	8d e0       	ldi	r24, 0x0D	; 13
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	21 50       	subi	r18, 0x01	; 1
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <main+0xa>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x14>
 570:	00 00       	nop
 572:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(1000);
		srand(time(0));
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	d6 dd       	rcall	.-1108   	; 0x124 <time>
 578:	66 d0       	rcall	.+204    	; 0x646 <srand>
 57a:	68 e0       	ldi	r22, 0x08	; 8
	createSeq(Seq, size);
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	8a e4       	ldi	r24, 0x4A	; 74
 580:	92 e0       	ldi	r25, 0x02	; 2
 582:	c9 de       	rcall	.-622    	; 0x316 <createSeq>
 584:	2f e3       	ldi	r18, 0x3F	; 63
 586:	8d e0       	ldi	r24, 0x0D	; 13
 588:	93 e0       	ldi	r25, 0x03	; 3
 58a:	21 50       	subi	r18, 0x01	; 1
 58c:	80 40       	sbci	r24, 0x00	; 0
 58e:	90 40       	sbci	r25, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <main+0x2e>
 592:	00 c0       	rjmp	.+0      	; 0x594 <main+0x38>
 594:	00 00       	nop
 596:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <nb>
	_delay_ms(1000);
		//compare(Seq,UserSeq, size);
	//	while (i < size) {
		//	makeLedBlinking(Seq[i]);
	//	for (int i = 0; i< size; i++) {
			compare(Seq,UserSeq, size, nb);
 59a:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <nb+0x1>
 59e:	48 e0       	ldi	r20, 0x08	; 8
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	6c e5       	ldi	r22, 0x5C	; 92
 5a4:	72 e0       	ldi	r23, 0x02	; 2
 5a6:	8a e4       	ldi	r24, 0x4A	; 74
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	47 df       	rcall	.-370    	; 0x43a <compare>
 5ac:	80 e0       	ldi	r24, 0x00	; 0
	//	}
	
		//	i++;
	//	}
	}
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	08 95       	ret

000005b2 <do_rand>:
 5b2:	8f 92       	push	r8
 5b4:	9f 92       	push	r9
 5b6:	af 92       	push	r10
 5b8:	bf 92       	push	r11
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ec 01       	movw	r28, r24
 5c8:	68 81       	ld	r22, Y
 5ca:	79 81       	ldd	r23, Y+1	; 0x01
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	9b 81       	ldd	r25, Y+3	; 0x03
 5d0:	61 15       	cp	r22, r1
 5d2:	71 05       	cpc	r23, r1
 5d4:	81 05       	cpc	r24, r1
 5d6:	91 05       	cpc	r25, r1
 5d8:	21 f4       	brne	.+8      	; 0x5e2 <do_rand+0x30>
 5da:	64 e2       	ldi	r22, 0x24	; 36
 5dc:	79 ed       	ldi	r23, 0xD9	; 217
 5de:	8b e5       	ldi	r24, 0x5B	; 91
 5e0:	97 e0       	ldi	r25, 0x07	; 7
 5e2:	2d e1       	ldi	r18, 0x1D	; 29
 5e4:	33 ef       	ldi	r19, 0xF3	; 243
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	38 d0       	rcall	.+112    	; 0x65c <__divmodsi4>
 5ec:	49 01       	movw	r8, r18
 5ee:	5a 01       	movw	r10, r20
 5f0:	9b 01       	movw	r18, r22
 5f2:	ac 01       	movw	r20, r24
 5f4:	a7 ea       	ldi	r26, 0xA7	; 167
 5f6:	b1 e4       	ldi	r27, 0x41	; 65
 5f8:	4d d0       	rcall	.+154    	; 0x694 <__muluhisi3>
 5fa:	6b 01       	movw	r12, r22
 5fc:	7c 01       	movw	r14, r24
 5fe:	ac ee       	ldi	r26, 0xEC	; 236
 600:	b4 ef       	ldi	r27, 0xF4	; 244
 602:	a5 01       	movw	r20, r10
 604:	94 01       	movw	r18, r8
 606:	52 d0       	rcall	.+164    	; 0x6ac <__mulohisi3>
 608:	dc 01       	movw	r26, r24
 60a:	cb 01       	movw	r24, r22
 60c:	8c 0d       	add	r24, r12
 60e:	9d 1d       	adc	r25, r13
 610:	ae 1d       	adc	r26, r14
 612:	bf 1d       	adc	r27, r15
 614:	b7 ff       	sbrs	r27, 7
 616:	03 c0       	rjmp	.+6      	; 0x61e <do_rand+0x6c>
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	a1 09       	sbc	r26, r1
 61c:	b0 48       	sbci	r27, 0x80	; 128
 61e:	88 83       	st	Y, r24
 620:	99 83       	std	Y+1, r25	; 0x01
 622:	aa 83       	std	Y+2, r26	; 0x02
 624:	bb 83       	std	Y+3, r27	; 0x03
 626:	9f 77       	andi	r25, 0x7F	; 127
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	df 90       	pop	r13
 632:	cf 90       	pop	r12
 634:	bf 90       	pop	r11
 636:	af 90       	pop	r10
 638:	9f 90       	pop	r9
 63a:	8f 90       	pop	r8
 63c:	08 95       	ret

0000063e <rand_r>:
 63e:	b9 cf       	rjmp	.-142    	; 0x5b2 <do_rand>

00000640 <rand>:
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	92 e0       	ldi	r25, 0x02	; 2
 644:	b6 cf       	rjmp	.-148    	; 0x5b2 <do_rand>

00000646 <srand>:
 646:	a0 e0       	ldi	r26, 0x00	; 0
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 64e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 652:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 656:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 65a:	08 95       	ret

0000065c <__divmodsi4>:
 65c:	05 2e       	mov	r0, r21
 65e:	97 fb       	bst	r25, 7
 660:	16 f4       	brtc	.+4      	; 0x666 <__divmodsi4+0xa>
 662:	00 94       	com	r0
 664:	0f d0       	rcall	.+30     	; 0x684 <__negsi2>
 666:	57 fd       	sbrc	r21, 7
 668:	05 d0       	rcall	.+10     	; 0x674 <__divmodsi4_neg2>
 66a:	24 d0       	rcall	.+72     	; 0x6b4 <__udivmodsi4>
 66c:	07 fc       	sbrc	r0, 7
 66e:	02 d0       	rcall	.+4      	; 0x674 <__divmodsi4_neg2>
 670:	46 f4       	brtc	.+16     	; 0x682 <__divmodsi4_exit>
 672:	08 c0       	rjmp	.+16     	; 0x684 <__negsi2>

00000674 <__divmodsi4_neg2>:
 674:	50 95       	com	r21
 676:	40 95       	com	r20
 678:	30 95       	com	r19
 67a:	21 95       	neg	r18
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	4f 4f       	sbci	r20, 0xFF	; 255
 680:	5f 4f       	sbci	r21, 0xFF	; 255

00000682 <__divmodsi4_exit>:
 682:	08 95       	ret

00000684 <__negsi2>:
 684:	90 95       	com	r25
 686:	80 95       	com	r24
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__muluhisi3>:
 694:	31 d0       	rcall	.+98     	; 0x6f8 <__umulhisi3>
 696:	a5 9f       	mul	r26, r21
 698:	90 0d       	add	r25, r0
 69a:	b4 9f       	mul	r27, r20
 69c:	90 0d       	add	r25, r0
 69e:	a4 9f       	mul	r26, r20
 6a0:	80 0d       	add	r24, r0
 6a2:	91 1d       	adc	r25, r1
 6a4:	11 24       	eor	r1, r1
 6a6:	08 95       	ret

000006a8 <__mulshisi3>:
 6a8:	b7 ff       	sbrs	r27, 7
 6aa:	f4 cf       	rjmp	.-24     	; 0x694 <__muluhisi3>

000006ac <__mulohisi3>:
 6ac:	f3 df       	rcall	.-26     	; 0x694 <__muluhisi3>
 6ae:	82 1b       	sub	r24, r18
 6b0:	93 0b       	sbc	r25, r19
 6b2:	08 95       	ret

000006b4 <__udivmodsi4>:
 6b4:	a1 e2       	ldi	r26, 0x21	; 33
 6b6:	1a 2e       	mov	r1, r26
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	fd 01       	movw	r30, r26
 6be:	0d c0       	rjmp	.+26     	; 0x6da <__udivmodsi4_ep>

000006c0 <__udivmodsi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	ee 1f       	adc	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	a2 17       	cp	r26, r18
 6ca:	b3 07       	cpc	r27, r19
 6cc:	e4 07       	cpc	r30, r20
 6ce:	f5 07       	cpc	r31, r21
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__udivmodsi4_ep>
 6d2:	a2 1b       	sub	r26, r18
 6d4:	b3 0b       	sbc	r27, r19
 6d6:	e4 0b       	sbc	r30, r20
 6d8:	f5 0b       	sbc	r31, r21

000006da <__udivmodsi4_ep>:
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	1a 94       	dec	r1
 6e4:	69 f7       	brne	.-38     	; 0x6c0 <__udivmodsi4_loop>
 6e6:	60 95       	com	r22
 6e8:	70 95       	com	r23
 6ea:	80 95       	com	r24
 6ec:	90 95       	com	r25
 6ee:	9b 01       	movw	r18, r22
 6f0:	ac 01       	movw	r20, r24
 6f2:	bd 01       	movw	r22, r26
 6f4:	cf 01       	movw	r24, r30
 6f6:	08 95       	ret

000006f8 <__umulhisi3>:
 6f8:	a2 9f       	mul	r26, r18
 6fa:	b0 01       	movw	r22, r0
 6fc:	b3 9f       	mul	r27, r19
 6fe:	c0 01       	movw	r24, r0
 700:	a3 9f       	mul	r26, r19
 702:	70 0d       	add	r23, r0
 704:	81 1d       	adc	r24, r1
 706:	11 24       	eor	r1, r1
 708:	91 1d       	adc	r25, r1
 70a:	b2 9f       	mul	r27, r18
 70c:	70 0d       	add	r23, r0
 70e:	81 1d       	adc	r24, r1
 710:	11 24       	eor	r1, r1
 712:	91 1d       	adc	r25, r1
 714:	08 95       	ret

00000716 <_exit>:
 716:	f8 94       	cli

00000718 <__stop_program>:
 718:	ff cf       	rjmp	.-2      	; 0x718 <__stop_program>
